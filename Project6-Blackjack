# link to play: http://www.codeskulptor.org/#user31_wgPArol9Mi1mysu_1.py

import simplegui
import random

# load card sprite - 949x392 - source: jfitz.com
CARD_SIZE = (73, 98)
CARD_CENTER = (36.5, 49)
card_images = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/cards.jfitz.png")

CARD_BACK_SIZE = (71, 96)
CARD_BACK_CENTER = (35.5, 48)
card_back = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/card_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0
text1 = ""
text2 = ""

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}

# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
# define hand class
class Hand:
    def __init__(self):
        self.cards = []

    def __str__(self):
        print self.cards	# return a string representation of a hand

    def add_card(self, card):
        self.cards.append(card)	# add a card object to a hand
 
    def get_value(self):
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        value = 0
        for card in self.cards:
            value += VALUES[card.get_rank()]
        if value + 10 <= 21:
            value += 10
        return value     # compute the value of the hand, see Blackjack video

    
    def draw(self, canvas, p):
        pass	# replace with your code
 
        
# define deck class
class Deck:
    def __init__(self):
        self.card = [Card(i, j) for i in SUITS for j in RANKS]
        self.shuffle()
        
    # add cards back to deck and shuffle
    def shuffle(self):
        random.shuffle(self.card)
        
    def deal_card(self):
        c = self.card.pop(0)
        self.card.append(c)
        return c
    
def init():
    global player, dealer, deck, text1, text2
    player = Hand()
    dealer = Hand()
    deck = Deck()
    text1 = "Hit or stand ?"
    text2 = ""
    for i in range(2):
        player.add_card(deck.deal_card())
        dealer.add_card(deck.deal_card()) 

#define event handlers for buttons
def deal():
    global player, dealer, outcome, in_play, score, text2
    
    if not(in_play):
        init()
    if in_play:
        score=score-1
        text2= "You lose >_<."
            
    in_play = True 

def hit():
    global player, dealer, deck, in_play, score, text1, text2
    # if the hand is in play, hit the player
    if in_play:
        player.add_card(deck.deal_card())
        if player.get_value() > 21:            
            text1 = "New deal ?"
            text2 = "You went bust and lose >_<..."
            in_play = 0
            score -= 1
            
def stand():
    global player, dealer, deck, score, in_play, text1, text2
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more
    if in_play:
        while dealer.get_value() < 17:
            dealer.add_card(deck.deal_card())
    
        # assign a message to outcome, update in_play and score
        if dealer.get_value() <= 21 and dealer.get_value() >= player.get_value():
            text1 = "New deal ?"
            text2 = "You lose >_< !"
            in_play = 0
            score -= 1
        else:
            text1 = "New deal ?"
            text2 = "You win ^_^ !"
            in_play = 0
            score += 1
    
# draw handler    
def draw(canvas):
    global player, dealer, in_play
    
    for i in range(len(player.cards)):
        player.cards[i].draw(canvas, [50 + 100 * i, 400])
    
    for i in range(len(dealer.cards)):
        dealer.cards[i].draw(canvas, [50 + 100 * i, 150])
            
    canvas.draw_text("Blackjack!", [10, 40], 50, "Black")
    canvas.draw_text("dealer", [80, 130], 30, "Black")
    canvas.draw_text("player", [80, 380], 30, "Black")
    canvas.draw_text("Score: " + str(score), [430, 40], 40, "Red")
    canvas.draw_text(text1, [250, 350], 30, "Black")
    canvas.draw_text(text2, [250, 130], 30, "Black")

    if in_play:
        canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, [86.5, 200], CARD_BACK_SIZE)

# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)

# deal an initial hand
deal()

# get things rolling
frame.start()
